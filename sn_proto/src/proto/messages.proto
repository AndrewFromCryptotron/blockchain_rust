syntax = "proto3";

package messages;

service Node {

    rpc Handshake(Version) returns (Version);

    rpc HandleTransaction(Transaction) returns (Confirmed);

    rpc HandleAgreement(HashAgreement) returns (Agreement);

    rpc HandleVote (Vote) returns (Confirmed);

}

message Confirmed { }

message Vote {

    uint64 msg_validator_id = 1;

    string msg_voter_addr = 2;

    uint64 msg_target_validator_id = 3;

}

message Version {

    bool msg_validator = 1;

    int32 msg_validator_id = 2;

    string msg_version = 3;

    bytes msg_public_key = 4;

    int32 msg_height = 5;

    string msg_listen_address = 6;

    repeated string msg_peer_list = 7;
    
}

message Agreement {

    bool agreed = 1;

}

message HashAgreement {

    uint64 msg_validator_id = 1;

    bytes msg_block_hash = 2;

    bool msg_agreement = 3;

    bool msg_is_responce = 4;

    string msg_sender_addr = 5;

}

message Block {

    Header msg_header = 1;

    repeated Transaction msg_transactions = 2; 

    bytes msg_public_key = 3;

    bytes msg_signature = 4;

}

message Header {

    int32 msg_version = 1;

    int32 msg_height = 2;

    bytes msg_previous_hash = 3;

    bytes msg_root_hash = 4;
    
    int64 msg_timestamp = 5;

}

message Transaction {

    int32 msg_version = 1;

    repeated TransactionInput msg_inputs = 2;

    repeated TransactionOutput msg_outputs = 3;

    int64 msg_relative_timestamp = 4;
    
}

message TransactionInput {

    bytes msg_previous_tx_hash = 1;

    uint32 msg_previous_out_index = 2;

    bytes msg_public_key = 3;

    bytes msg_signature = 4;

}

message TransactionOutput {

    int64 msg_amount = 1;

    bytes msg_address = 2;

}