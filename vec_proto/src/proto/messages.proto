syntax = "proto3";

package messages;

service Node {
    rpc Handshake(Version) returns (Version);
    rpc PushState(LocalState) returns (BlockBatch);
    rpc HandlePeerList(PeerList) returns (Confirmed);
    rpc HandleBlockPush(PushBlockRequest) returns (Confirmed);
    rpc HandleBlockPull(PullBlockRequest) returns (Block);
    rpc HandleTxPush(PushTxRequest) returns (Confirmed);
    rpc HandleTxPull(PullTxRequest) returns (Transaction);
}

message Confirmed { }

message PushBlockRequest {
    bytes msg_block_hash = 1;
    string msg_ip = 2;
}

message PullBlockRequest {
    bytes msg_block_hash = 1;
    string msg_ip = 2;
}

message PushTxRequest {
    bytes msg_transaction_hash = 1;
    string msg_ip = 2;
}

message PullTxRequest {
    bytes msg_transaction_hash = 1;
    string msg_ip = 2;
}

message PeerList {
    repeated string msg_peers_ips = 1;
}

message LocalState {
    uint64 msg_max_local_index = 1;
}

message Version {
    uint32 msg_version = 1;
    bytes msg_address = 2;
    string msg_ip = 4;
    uint64 msg_max_local_index = 5;
}

message BlockBatch {
    repeated Block msg_blocks = 1;
}

message Block {
    Header msg_header = 1;
    repeated Transaction msg_transactions = 2;
}

message Header {
    uint32 msg_version = 1;
    uint64 msg_index = 2;
    bytes msg_previous_hash = 3;
    bytes msg_root_hash = 4;
    uint64 msg_timestamp = 5;
    uint64 msg_nonce = 6;
}

message Contract {
    bytes msg_code = 1;
}

message Transaction {
    repeated TransactionInput msg_inputs = 1;
    repeated TransactionOutput msg_outputs = 2;
    Contract msg_contract = 3;
}

message TransactionInput {
    repeated bytes msg_ring = 1;
    bytes msg_blsag = 2;
    bytes msg_message = 3;
    bytes msg_key_image = 5;
}

message TransactionOutput {
    bytes msg_stealth_address = 1; 
    bytes msg_output_key = 2;
    bytes msg_proof = 4; 
    bytes msg_commitment = 5; 
    bytes msg_amount = 6;
    uint64 msg_index = 7;
}