{"message":"recursion in an `async fn` requires boxing","code":{"code":"E0733","explanation":"An [`async`] function used recursion without boxing.\n\nErroneous code example:\n\n```edition2018,compile_fail,E0733\nasync fn foo(n: usize) {\n    if n > 0 {\n        foo(n - 1).await;\n    }\n}\n```\n\nTo perform async recursion, the `async fn` needs to be desugared such that the\n`Future` is explicit in the return type:\n\n```edition2018,compile_fail,E0720\nuse std::future::Future;\nfn foo_desugared(n: usize) -> impl Future<Output = ()> {\n    async move {\n        if n > 0 {\n            foo_desugared(n - 1).await;\n        }\n    }\n}\n```\n\nFinally, the future is wrapped in a pinned box:\n\n```edition2018\nuse std::future::Future;\nuse std::pin::Pin;\nfn foo_recursive(n: usize) -> Pin<Box<dyn Future<Output = ()>>> {\n    Box::pin(async move {\n        if n > 0 {\n            foo_recursive(n - 1).await;\n        }\n    })\n}\n```\n\nThe `Box<...>` ensures that the result is of known size, and the pin is\nrequired to keep it in the same place in memory.\n\n[`async`]: https://doc.rust-lang.org/std/keyword.async.html\n"},"level":"error","spans":[{"file_name":"sn_node\\src\\node.rs","byte_start":5172,"byte_end":5172,"line_start":168,"line_end":168,"column_start":80,"column_end":80,"is_primary":true,"text":[{"text":"    pub async fn add_peer(self: Arc<Self>, c: NodeClient<Channel>, v: Version) {","highlight_start":80,"highlight_end":80}],"label":"recursive `async fn`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"sn_node\\src\\node.rs","byte_start":5172,"byte_end":5172,"line_start":168,"line_end":168,"column_start":80,"column_end":80,"is_primary":false,"text":[{"text":"    pub async fn add_peer(self: Arc<Self>, c: NodeClient<Channel>, v: Version) {","highlight_start":80,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `async` block or function","def_site_span":{"file_name":"sn_node\\src\\lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a recursive `async fn` must be rewritten to return a boxed `dyn Future`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using the `async_recursion` crate: https://crates.io/crates/async_recursion","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0733]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: recursion in an `async fn` requires boxing\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msn_node\\src\\node.rs:168:80\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m168\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub async fn add_peer(self: Arc<Self>, c: NodeClient<Channel>, v: Version) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mrecursive `async fn`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: a recursive `async fn` must be rewritten to return a boxed `dyn Future`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: consider using the `async_recursion` crate: https://crates.io/crates/async_recursion\u001b[0m\n\n"}
{"message":"recursion in an `async fn` requires boxing","code":{"code":"E0733","explanation":"An [`async`] function used recursion without boxing.\n\nErroneous code example:\n\n```edition2018,compile_fail,E0733\nasync fn foo(n: usize) {\n    if n > 0 {\n        foo(n - 1).await;\n    }\n}\n```\n\nTo perform async recursion, the `async fn` needs to be desugared such that the\n`Future` is explicit in the return type:\n\n```edition2018,compile_fail,E0720\nuse std::future::Future;\nfn foo_desugared(n: usize) -> impl Future<Output = ()> {\n    async move {\n        if n > 0 {\n            foo_desugared(n - 1).await;\n        }\n    }\n}\n```\n\nFinally, the future is wrapped in a pinned box:\n\n```edition2018\nuse std::future::Future;\nuse std::pin::Pin;\nfn foo_recursive(n: usize) -> Pin<Box<dyn Future<Output = ()>>> {\n    Box::pin(async move {\n        if n > 0 {\n            foo_recursive(n - 1).await;\n        }\n    })\n}\n```\n\nThe `Box<...>` ensures that the result is of known size, and the pin is\nrequired to keep it in the same place in memory.\n\n[`async`]: https://doc.rust-lang.org/std/keyword.async.html\n"},"level":"error","spans":[{"file_name":"sn_node\\src\\node.rs","byte_start":5982,"byte_end":6007,"line_start":196,"line_end":196,"column_start":10,"column_end":35,"is_primary":true,"text":[{"text":"    ) -> Result<(), anyhow::Error> {","highlight_start":10,"highlight_end":35}],"label":"recursive `async fn`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"sn_node\\src\\node.rs","byte_start":5982,"byte_end":6007,"line_start":196,"line_end":196,"column_start":10,"column_end":35,"is_primary":false,"text":[{"text":"    ) -> Result<(), anyhow::Error> {","highlight_start":10,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `async` block or function","def_site_span":{"file_name":"sn_node\\src\\lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a recursive `async fn` must be rewritten to return a boxed `dyn Future`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using the `async_recursion` crate: https://crates.io/crates/async_recursion","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0733]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: recursion in an `async fn` requires boxing\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msn_node\\src\\node.rs:196:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m196\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) -> Result<(), anyhow::Error> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mrecursive `async fn`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: a recursive `async fn` must be rewritten to return a boxed `dyn Future`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: consider using the `async_recursion` crate: https://crates.io/crates/async_recursion\u001b[0m\n\n"}
{"message":"`impl Future<Output = Vec<String>>` is not an iterator","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"sn_node\\src\\node.rs","byte_start":7349,"byte_end":7364,"line_start":235,"line_end":235,"column_start":31,"column_end":46,"is_primary":true,"text":[{"text":"        for connected_addr in connected_peers {","highlight_start":31,"highlight_end":46}],"label":"`impl Future<Output = Vec<String>>` is not an iterator","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"sn_node\\src\\node.rs","byte_start":7349,"byte_end":7364,"line_start":235,"line_end":235,"column_start":31,"column_end":46,"is_primary":false,"text":[{"text":"        for connected_addr in connected_peers {","highlight_start":31,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `for` loop","def_site_span":{"file_name":"sn_node\\src\\lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the trait `Iterator` is not implemented for `impl Future<Output = Vec<String>>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `impl Future<Output = Vec<String>>` to implement `IntoIterator`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: `impl Future<Output = Vec<String>>` is not an iterator\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msn_node\\src\\node.rs:235:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m235\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        for connected_addr in connected_peers {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`impl Future<Output = Vec<String>>` is not an iterator\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the trait `Iterator` is not implemented for `impl Future<Output = Vec<String>>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: required for `impl Future<Output = Vec<String>>` to implement `IntoIterator`\u001b[0m\n\n"}
{"message":"no method named `add_peer` found for reference `&OperationalNode` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"sn_node\\src\\node.rs","byte_start":8085,"byte_end":8093,"line_start":261,"line_end":261,"column_start":14,"column_end":22,"is_primary":true,"text":[{"text":"        self.add_peer(c, v.clone()).await;","highlight_start":14,"highlight_end":22}],"label":"method not found in `&OperationalNode`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: no method named `add_peer` found for reference `&OperationalNode` in the current scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msn_node\\src\\node.rs:261:14\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m261\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        self.add_peer(c, v.clone()).await;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod not found in `&OperationalNode`\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"sn_node\\src\\node.rs","byte_start":8143,"byte_end":8161,"line_start":263,"line_end":263,"column_start":26,"column_end":44,"is_primary":true,"text":[{"text":"        Ok(Response::new(self.get_version()))","highlight_start":26,"highlight_end":44}],"label":"expected struct `Version`, found opaque type","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"sn_node\\src\\node.rs","byte_start":8129,"byte_end":8142,"line_start":263,"line_end":263,"column_start":12,"column_end":25,"is_primary":false,"text":[{"text":"        Ok(Response::new(self.get_version()))","highlight_start":12,"highlight_end":25}],"label":"arguments to this function are incorrect","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"while checking the return type of the `async fn`","code":null,"level":"note","spans":[{"file_name":"sn_node\\src\\node.rs","byte_start":6869,"byte_end":6876,"line_start":220,"line_end":220,"column_start":40,"column_end":47,"is_primary":true,"text":[{"text":"    pub async fn get_version(&self) -> Version {","highlight_start":40,"highlight_end":47}],"label":"checked the `Output` of this `async fn`, found opaque type","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"sn_node\\src\\node.rs","byte_start":6869,"byte_end":6876,"line_start":220,"line_end":220,"column_start":40,"column_end":47,"is_primary":false,"text":[{"text":"    pub async fn get_version(&self) -> Version {","highlight_start":40,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `async` block or function","def_site_span":{"file_name":"sn_node\\src\\lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"  expected struct `sn_proto::messages::Version`\nfound opaque type `impl Future<Output = sn_proto::messages::Version>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"associated function defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\Mi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tonic-0.8.3\\src\\response.rs","byte_start":560,"byte_end":563,"line_start":24,"line_end":24,"column_start":12,"column_end":15,"is_primary":true,"text":[{"text":"    pub fn new(message: T) -> Self {","highlight_start":12,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"consider `await`ing on the `Future`","code":null,"level":"help","spans":[{"file_name":"sn_node\\src\\node.rs","byte_start":8161,"byte_end":8161,"line_start":263,"line_end":263,"column_start":44,"column_end":44,"is_primary":true,"text":[{"text":"        Ok(Response::new(self.get_version()))","highlight_start":44,"highlight_end":44}],"label":null,"suggested_replacement":".await","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msn_node\\src\\node.rs:263:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m263\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Ok(Response::new(self.get_version()))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `Version`, found opaque type\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14marguments to this function are incorrect\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: while checking the return type of the `async fn`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msn_node\\src\\node.rs:220:40\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m220\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub async fn get_version(&self) -> Version {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mchecked the `Output` of this `async fn`, found opaque type\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m:   expected struct `\u001b[0m\u001b[0m\u001b[1msn_proto::messages::Version\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m            found opaque type `\u001b[0m\u001b[0m\u001b[1mimpl Future<Output = sn_proto::messages::Version>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: associated function defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\Mi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tonic-0.8.3\\src\\response.rs:24:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m24\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn new(message: T) -> Self {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider `await`ing on the `Future`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m263\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        Ok(Response::new(self.get_version()\u001b[0m\u001b[0m\u001b[38;5;10m.await\u001b[0m\u001b[0m))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[38;5;10m++++++\u001b[0m\n\n"}
{"message":"no method named `add` found for struct `Mutex` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"sn_node\\src\\node.rs","byte_start":8460,"byte_end":8463,"line_start":271,"line_end":271,"column_start":25,"column_end":28,"is_primary":true,"text":[{"text":"        if self.mempool.add(&tx) {","highlight_start":25,"highlight_end":28}],"label":"method not found in `Mutex<Mempool>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: no method named `add` found for struct `Mutex` in the current scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msn_node\\src\\node.rs:271:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m271\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if self.mempool.add(&tx) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod not found in `Mutex<Mempool>`\u001b[0m\n\n"}
{"message":"aborting due to 6 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: aborting due to 6 previous errors\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0277, E0308, E0599, E0733.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mSome errors have detailed explanations: E0277, E0308, E0599, E0733.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mFor more information about an error, try `rustc --explain E0277`.\u001b[0m\n"}
