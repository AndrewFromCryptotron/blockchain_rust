{"message":"the method `handshake` exists for struct `NodeClient<Channel>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"sn_node\\src\\node.rs","byte_start":6403,"byte_end":6412,"line_start":189,"line_end":189,"column_start":19,"column_end":28,"is_primary":true,"text":[{"text":"        let v = c.handshake(version).await?.into_inner();","highlight_start":19,"highlight_end":28}],"label":"method cannot be called on `NodeClient<Channel>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\Mi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tonic-0.9.1\\src\\transport\\channel\\mod.rs","byte_start":2236,"byte_end":2254,"line_start":69,"line_end":69,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"pub struct Channel {","highlight_start":1,"highlight_end":19}],"label":"doesn't satisfy `<_ as Service<Request<UnsyncBoxBody<Bytes, Status>>>>::Response = Response<_>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\Mi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tonic-0.9.1\\src\\transport\\channel\\mod.rs","byte_start":2236,"byte_end":2254,"line_start":69,"line_end":69,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"pub struct Channel {","highlight_start":1,"highlight_end":19}],"label":"doesn't satisfy `_: GrpcService<UnsyncBoxBody<Bytes, Status>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\Mi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tonic-0.9.1\\src\\transport\\channel\\mod.rs","byte_start":2236,"byte_end":2254,"line_start":69,"line_end":69,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"pub struct Channel {","highlight_start":1,"highlight_end":19}],"label":"doesn't satisfy `_: Service<Request<UnsyncBoxBody<Bytes, Status>>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied:\n`Channel: tonic::client::service::GrpcService<http_body::combinators::box_body::UnsyncBoxBody<hyper::body::Bytes, tonic::status::Status>>`\n`<Channel as Service<hyper::Request<http_body::combinators::box_body::UnsyncBoxBody<hyper::body::Bytes, tonic::status::Status>>>>::Response = hyper::Response<_>`\n`Channel: Service<hyper::Request<http_body::combinators::box_body::UnsyncBoxBody<hyper::body::Bytes, tonic::status::Status>>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the method `handshake` exists for struct `NodeClient<Channel>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msn_node\\src\\node.rs:189:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m189\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let v = c.handshake(version).await?.into_inner();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `NodeClient<Channel>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\Mi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tonic-0.9.1\\src\\transport\\channel\\mod.rs:69:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m69\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Channel {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m------------------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mdoesn't satisfy `<_ as Service<Request<UnsyncBoxBody<Bytes, Status>>>>::Response = Response<_>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mdoesn't satisfy `_: GrpcService<UnsyncBoxBody<Bytes, Status>>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mdoesn't satisfy `_: Service<Request<UnsyncBoxBody<Bytes, Status>>>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m            `Channel: tonic::client::service::GrpcService<http_body::combinators::box_body::UnsyncBoxBody<hyper::body::Bytes, tonic::status::Status>>`\u001b[0m\n\u001b[0m            `<Channel as Service<hyper::Request<http_body::combinators::box_body::UnsyncBoxBody<hyper::body::Bytes, tonic::status::Status>>>>::Response = hyper::Response<_>`\u001b[0m\n\u001b[0m            `Channel: Service<hyper::Request<http_body::combinators::box_body::UnsyncBoxBody<hyper::body::Bytes, tonic::status::Status>>>`\u001b[0m\n\n"}
{"message":"type mismatch resolving `<NodeServer<OperationalNodeArc> as Service<Request<Body>>>::Response == Response<UnsyncBoxBody<Bytes, Status>>`","code":{"code":"E0271","explanation":"A type mismatched an associated type of a trait.\n\nErroneous code example:\n\n```compile_fail,E0271\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType=u32> {\n//                    ~~~~~~~~ ~~~~~~~~~~~~~~~~~~\n//                        |            |\n//         This says `foo` can         |\n//           only be used with         |\n//              some type that         |\n//         implements `Trait`.         |\n//                                     |\n//                             This says not only must\n//                             `T` be an impl of `Trait`\n//                             but also that the impl\n//                             must assign the type `u32`\n//                             to the associated type.\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = &'static str; }\n//~~~~~~~~~~~~~~~   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//      |                             |\n// `i8` does have                     |\n// implementation                     |\n// of `Trait`...                      |\n//                     ... but it is an implementation\n//                     that assigns `&'static str` to\n//                     the associated type.\n\nfoo(3_i8);\n// Here, we invoke `foo` with an `i8`, which does not satisfy\n// the constraint `<i8 as Trait>::AssociatedType=u32`, and\n// therefore the type-checker complains with this error code.\n```\n\nThe issue can be resolved by changing the associated type:\n1) in the `foo` implementation:\n```\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType = &'static str> {\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = &'static str; }\n\nfoo(3_i8);\n```\n\n2) in the `Trait` implementation for `i8`:\n```\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType = u32> {\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = u32; }\n\nfoo(3_i8);\n```\n"},"level":"error","spans":[{"file_name":"sn_node\\src\\node.rs","byte_start":3408,"byte_end":3419,"line_start":109,"line_end":109,"column_start":39,"column_end":50,"is_primary":true,"text":[{"text":"        Server::builder().add_service(node_server).serve(addr).await?;","highlight_start":39,"highlight_end":50}],"label":"expected struct `Status`, found struct `tonic::status::Status`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"sn_node\\src\\node.rs","byte_start":3396,"byte_end":3407,"line_start":109,"line_end":109,"column_start":27,"column_end":38,"is_primary":false,"text":[{"text":"        Server::builder().add_service(node_server).serve(addr).await?;","highlight_start":27,"highlight_end":38}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"struct `tonic::status::Status` and struct `Status` have similar names, but are actually distinct types","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"struct `tonic::status::Status` is defined in crate `tonic`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\Mi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tonic-0.8.3\\src\\status.rs","byte_start":1122,"byte_end":1139,"line_start":37,"line_end":37,"column_start":1,"column_end":18,"is_primary":true,"text":[{"text":"pub struct Status {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"struct `Status` is defined in crate `tonic`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\Mi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tonic-0.9.1\\src\\status.rs","byte_start":1147,"byte_end":1164,"line_start":38,"line_end":38,"column_start":1,"column_end":18,"is_primary":true,"text":[{"text":"pub struct Status {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `tonic` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `tonic::transport::Server::<L>::add_service`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\Mi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tonic-0.9.1\\src\\transport\\server\\mod.rs","byte_start":10353,"byte_end":10381,"line_start":346,"line_end":346,"column_start":35,"column_end":63,"is_primary":true,"text":[{"text":"        S: Service<Request<Body>, Response = Response<BoxBody>, Error = Infallible>","highlight_start":35,"highlight_end":63}],"label":"required by this bound in `Server::<L>::add_service`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0271]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: type mismatch resolving `<NodeServer<OperationalNodeArc> as Service<Request<Body>>>::Response == Response<UnsyncBoxBody<Bytes, Status>>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msn_node\\src\\node.rs:109:39\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m109\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Server::builder().add_service(node_server).serve(addr).await?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `Status`, found struct `tonic::status::Status`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: struct `tonic::status::Status` and struct `Status` have similar names, but are actually distinct types\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: struct `tonic::status::Status` is defined in crate `tonic`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\Mi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tonic-0.8.3\\src\\status.rs:37:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m37\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Status {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: struct `Status` is defined in crate `tonic`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\Mi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tonic-0.9.1\\src\\status.rs:38:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m38\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Status {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `tonic` are being used?\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `tonic::transport::Server::<L>::add_service`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\Mi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tonic-0.9.1\\src\\transport\\server\\mod.rs:346:35\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m346\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        S: Service<Request<Body>, Response = Response<BoxBody>, Error = Infallible>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Server::<L>::add_service`\u001b[0m\n\n"}
{"message":"the trait bound `NodeServer<OperationalNodeArc>: NamedService` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"sn_node\\src\\node.rs","byte_start":3408,"byte_end":3419,"line_start":109,"line_end":109,"column_start":39,"column_end":50,"is_primary":true,"text":[{"text":"        Server::builder().add_service(node_server).serve(addr).await?;","highlight_start":39,"highlight_end":50}],"label":"the trait `NamedService` is not implemented for `NodeServer<OperationalNodeArc>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"sn_node\\src\\node.rs","byte_start":3396,"byte_end":3407,"line_start":109,"line_end":109,"column_start":27,"column_end":38,"is_primary":false,"text":[{"text":"        Server::builder().add_service(node_server).serve(addr).await?;","highlight_start":27,"highlight_end":38}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `NamedService`:\n  InterceptedService<S, F>\n  tower::util::either::Either<S, T>","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `tonic::transport::Server::<L>::add_service`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\Mi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tonic-0.9.1\\src\\transport\\server\\mod.rs","byte_start":10417,"byte_end":10429,"line_start":347,"line_end":347,"column_start":15,"column_end":27,"is_primary":true,"text":[{"text":"            + NamedService","highlight_start":15,"highlight_end":27}],"label":"required by this bound in `Server::<L>::add_service`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the trait bound `NodeServer<OperationalNodeArc>: NamedService` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msn_node\\src\\node.rs:109:39\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m109\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Server::builder().add_service(node_server).serve(addr).await?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `NamedService` is not implemented for `NodeServer<OperationalNodeArc>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the following other types implement trait `NamedService`:\u001b[0m\n\u001b[0m              InterceptedService<S, F>\u001b[0m\n\u001b[0m              tower::util::either::Either<S, T>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `tonic::transport::Server::<L>::add_service`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\Mi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tonic-0.9.1\\src\\transport\\server\\mod.rs:347:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m347\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            + NamedService\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Server::<L>::add_service`\u001b[0m\n\n"}
{"message":"the method `handle_transaction` exists for struct `MutexGuard<'_, NodeClient<Channel>>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"sn_node\\src\\node.rs","byte_start":4543,"byte_end":4561,"line_start":139,"line_end":139,"column_start":47,"column_end":65,"is_primary":true,"text":[{"text":"                    let _ = peer.lock().await.handle_transaction(Request::new(tx.clone())).await?;","highlight_start":47,"highlight_end":65}],"label":"method cannot be called on `MutexGuard<'_, NodeClient<Channel>>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\Mi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tonic-0.9.1\\src\\transport\\channel\\mod.rs","byte_start":2236,"byte_end":2254,"line_start":69,"line_end":69,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"pub struct Channel {","highlight_start":1,"highlight_end":19}],"label":"doesn't satisfy `<_ as Service<Request<UnsyncBoxBody<Bytes, Status>>>>::Response = Response<_>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\Mi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tonic-0.9.1\\src\\transport\\channel\\mod.rs","byte_start":2236,"byte_end":2254,"line_start":69,"line_end":69,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"pub struct Channel {","highlight_start":1,"highlight_end":19}],"label":"doesn't satisfy `_: GrpcService<UnsyncBoxBody<Bytes, Status>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\Mi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tonic-0.9.1\\src\\transport\\channel\\mod.rs","byte_start":2236,"byte_end":2254,"line_start":69,"line_end":69,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"pub struct Channel {","highlight_start":1,"highlight_end":19}],"label":"doesn't satisfy `_: Service<Request<UnsyncBoxBody<Bytes, Status>>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied:\n`Channel: tonic::client::service::GrpcService<http_body::combinators::box_body::UnsyncBoxBody<hyper::body::Bytes, tonic::status::Status>>`\n`<Channel as Service<hyper::Request<http_body::combinators::box_body::UnsyncBoxBody<hyper::body::Bytes, tonic::status::Status>>>>::Response = hyper::Response<_>`\n`Channel: Service<hyper::Request<http_body::combinators::box_body::UnsyncBoxBody<hyper::body::Bytes, tonic::status::Status>>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the method `handle_transaction` exists for struct `MutexGuard<'_, NodeClient<Channel>>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msn_node\\src\\node.rs:139:47\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m139\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    let _ = peer.lock().await.handle_transaction(Request::new(tx.clone())).await?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `MutexGuard<'_, NodeClient<Channel>>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\Mi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tonic-0.9.1\\src\\transport\\channel\\mod.rs:69:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m69\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Channel {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m------------------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mdoesn't satisfy `<_ as Service<Request<UnsyncBoxBody<Bytes, Status>>>>::Response = Response<_>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mdoesn't satisfy `_: GrpcService<UnsyncBoxBody<Bytes, Status>>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mdoesn't satisfy `_: Service<Request<UnsyncBoxBody<Bytes, Status>>>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m            `Channel: tonic::client::service::GrpcService<http_body::combinators::box_body::UnsyncBoxBody<hyper::body::Bytes, tonic::status::Status>>`\u001b[0m\n\u001b[0m            `<Channel as Service<hyper::Request<http_body::combinators::box_body::UnsyncBoxBody<hyper::body::Bytes, tonic::status::Status>>>>::Response = hyper::Response<_>`\u001b[0m\n\u001b[0m            `Channel: Service<hyper::Request<http_body::combinators::box_body::UnsyncBoxBody<hyper::body::Bytes, tonic::status::Status>>>`\u001b[0m\n\n"}
{"message":"method `handshake` has an incompatible type for trait","code":{"code":"E0053","explanation":"The parameters of any trait method must match between a trait implementation\nand the trait definition.\n\nErroneous code example:\n\n```compile_fail,E0053\ntrait Foo {\n    fn foo(x: u16);\n    fn bar(&self);\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    // error, expected u16, found i16\n    fn foo(x: i16) { }\n\n    // error, types differ in mutability\n    fn bar(&mut self) { }\n}\n```\n"},"level":"error","spans":[{"file_name":"sn_node\\src\\node.rs","byte_start":7553,"byte_end":7569,"line_start":228,"line_end":228,"column_start":40,"column_end":56,"is_primary":true,"text":[{"text":"    async fn handshake(&self, request: Request<Version>) -> Result<Response<Version>, Status> {","highlight_start":40,"highlight_end":56}],"label":"expected struct `tonic::request::Request`, found struct `tonic::Request`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected signature `fn(&'life0 OperationalNodeArc, tonic::request::Request<sn_proto::messages::Version>) -> Pin<Box<(dyn Future<Output = Result<tonic::response::Response<sn_proto::messages::Version>, tonic::status::Status>> + Send + 'async_trait)>>`\n   found signature `fn(&'life0 OperationalNodeArc, tonic::Request<sn_proto::messages::Version>) -> Pin<Box<(dyn Future<Output = Result<tonic::Response<sn_proto::messages::Version>, Status>> + Send + 'async_trait)>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"change the parameter type to match the trait","code":null,"level":"help","spans":[{"file_name":"sn_node\\src\\node.rs","byte_start":7553,"byte_end":7569,"line_start":228,"line_end":228,"column_start":40,"column_end":56,"is_primary":true,"text":[{"text":"    async fn handshake(&self, request: Request<Version>) -> Result<Response<Version>, Status> {","highlight_start":40,"highlight_end":56}],"label":null,"suggested_replacement":"tonic::request::Request<sn_proto::messages::Version>","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0053]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: method `handshake` has an incompatible type for trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msn_node\\src\\node.rs:228:40\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m228\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    async fn handshake(&self, request: Request<Version>) -> Result<Response<Version>, Status> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `tonic::request::Request`, found struct `tonic::Request`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: change the parameter type to match the trait: `tonic::request::Request<sn_proto::messages::Version>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: expected signature `fn(\u001b[0m\u001b[0m\u001b[1m&'life0 \u001b[0m\u001b[0mOperationalNodeArc, tonic::\u001b[0m\u001b[0m\u001b[1mrequest::Request<sn_proto::messages::Version>\u001b[0m\u001b[0m) -> Pin<Box<\u001b[0m\u001b[0m\u001b[1m(dyn Future<Output = Result<tonic::response::Response<sn_proto::messages::Version>, tonic::status::Status>> + Send + 'async_trait)\u001b[0m\u001b[0m>>`\u001b[0m\n\u001b[0m               found signature `fn(\u001b[0m\u001b[0m\u001b[1m&'life0 \u001b[0m\u001b[0mOperationalNodeArc, tonic::\u001b[0m\u001b[0m\u001b[1mRequest<sn_proto::messages::Version>\u001b[0m\u001b[0m) -> Pin<Box<\u001b[0m\u001b[0m\u001b[1m(dyn Future<Output = Result<tonic::Response<sn_proto::messages::Version>, Status>> + Send + 'async_trait)\u001b[0m\u001b[0m>>`\u001b[0m\n\n"}
{"message":"method `handle_transaction` has an incompatible type for trait","code":{"code":"E0053","explanation":"The parameters of any trait method must match between a trait implementation\nand the trait definition.\n\nErroneous code example:\n\n```compile_fail,E0053\ntrait Foo {\n    fn foo(x: u16);\n    fn bar(&self);\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    // error, expected u16, found i16\n    fn foo(x: i16) { }\n\n    // error, types differ in mutability\n    fn bar(&mut self) { }\n}\n```\n"},"level":"error","spans":[{"file_name":"sn_node\\src\\node.rs","byte_start":7948,"byte_end":7968,"line_start":236,"line_end":236,"column_start":49,"column_end":69,"is_primary":true,"text":[{"text":"    async fn handle_transaction(&self, request: Request<Transaction>) -> Result<Response<Confirmed>, Status> {","highlight_start":49,"highlight_end":69}],"label":"expected struct `tonic::request::Request`, found struct `tonic::Request`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected signature `fn(&'life0 OperationalNodeArc, tonic::request::Request<Transaction>) -> Pin<Box<(dyn Future<Output = Result<tonic::response::Response<Confirmed>, tonic::status::Status>> + Send + 'async_trait)>>`\n   found signature `fn(&'life0 OperationalNodeArc, tonic::Request<Transaction>) -> Pin<Box<(dyn Future<Output = Result<tonic::Response<Confirmed>, Status>> + Send + 'async_trait)>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"change the parameter type to match the trait","code":null,"level":"help","spans":[{"file_name":"sn_node\\src\\node.rs","byte_start":7948,"byte_end":7968,"line_start":236,"line_end":236,"column_start":49,"column_end":69,"is_primary":true,"text":[{"text":"    async fn handle_transaction(&self, request: Request<Transaction>) -> Result<Response<Confirmed>, Status> {","highlight_start":49,"highlight_end":69}],"label":null,"suggested_replacement":"tonic::request::Request<Transaction>","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0053]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: method `handle_transaction` has an incompatible type for trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msn_node\\src\\node.rs:236:49\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m236\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    async fn handle_transaction(&self, request: Request<Transaction>) -> Result<Response<Confirmed>, Status> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `tonic::request::Request`, found struct `tonic::Request`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: change the parameter type to match the trait: `tonic::request::Request<Transaction>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: expected signature `fn(\u001b[0m\u001b[0m\u001b[1m&'life0 \u001b[0m\u001b[0mOperationalNodeArc, tonic::\u001b[0m\u001b[0m\u001b[1mrequest::Request<Transaction>\u001b[0m\u001b[0m) -> Pin<Box<\u001b[0m\u001b[0m\u001b[1m(dyn Future<Output = Result<tonic::response::Response<Confirmed>, tonic::status::Status>> + Send + 'async_trait)\u001b[0m\u001b[0m>>`\u001b[0m\n\u001b[0m               found signature `fn(\u001b[0m\u001b[0m\u001b[1m&'life0 \u001b[0m\u001b[0mOperationalNodeArc, tonic::\u001b[0m\u001b[0m\u001b[1mRequest<Transaction>\u001b[0m\u001b[0m) -> Pin<Box<\u001b[0m\u001b[0m\u001b[1m(dyn Future<Output = Result<tonic::Response<Confirmed>, Status>> + Send + 'async_trait)\u001b[0m\u001b[0m>>`\u001b[0m\n\n"}
{"message":"the trait bound `Channel: Service<hyper::Request<http_body::combinators::box_body::UnsyncBoxBody<hyper::body::Bytes, tonic::status::Status>>>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"sn_node\\src\\node.rs","byte_start":8907,"byte_end":8922,"line_start":257,"line_end":257,"column_start":8,"column_end":23,"is_primary":true,"text":[{"text":"    Ok(NodeClient::new(channel))","highlight_start":8,"highlight_end":23}],"label":"the trait `Service<hyper::Request<http_body::combinators::box_body::UnsyncBoxBody<hyper::body::Bytes, tonic::status::Status>>>` is not implemented for `Channel`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `Service<hyper::Request<http_body::combinators::box_body::UnsyncBoxBody<hyper::body::Bytes, Status>>>` is implemented for `Channel`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `Channel` to implement `tonic::client::service::GrpcService<http_body::combinators::box_body::UnsyncBoxBody<hyper::body::Bytes, tonic::status::Status>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the trait bound `Channel: Service<hyper::Request<http_body::combinators::box_body::UnsyncBoxBody<hyper::body::Bytes, tonic::status::Status>>>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msn_node\\src\\node.rs:257:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m257\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Ok(NodeClient::new(channel))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Service<hyper::Request<http_body::combinators::box_body::UnsyncBoxBody<hyper::body::Bytes, tonic::status::Status>>>` is not implemented for `Channel`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the trait `Service<hyper::Request<http_body::combinators::box_body::UnsyncBoxBody<hyper::body::Bytes, Status>>>` \u001b[0m\u001b[0m\u001b[1mis\u001b[0m\u001b[0m implemented for `\u001b[0m\u001b[0m\u001b[1mChannel\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: required for `Channel` to implement `tonic::client::service::GrpcService<http_body::combinators::box_body::UnsyncBoxBody<hyper::body::Bytes, tonic::status::Status>>`\u001b[0m\n\n"}
{"message":"binary operation `==` cannot be applied to type `Keypair`","code":{"code":"E0369","explanation":"A binary operation was attempted on a type which doesn't support it.\n\nErroneous code example:\n\n```compile_fail,E0369\nlet x = 12f32; // error: binary operation `<<` cannot be applied to\n               //        type `f32`\n\nx << 2;\n```\n\nTo fix this error, please check that this type implements this binary\noperation. Example:\n\n```\nlet x = 12u32; // the `u32` type does implement it:\n               // https://doc.rust-lang.org/stable/std/ops/trait.Shl.html\n\nx << 2; // ok!\n```\n\nIt is also possible to overload most operators for your own type by\nimplementing traits from `std::ops`.\n\nString concatenation appends the string on the right to the string on the\nleft and may require reallocation. This requires ownership of the string\non the left. If something should be added to a string literal, move the\nliteral to the heap by allocating it with `to_owned()` like in\n`\"Your text\".to_owned()`.\n"},"level":"error","spans":[{"file_name":"sn_node\\src\\node.rs","byte_start":1930,"byte_end":1950,"line_start":68,"line_end":68,"column_start":5,"column_end":25,"is_primary":true,"text":[{"text":"    pub keypair: Keypair,","highlight_start":5,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"sn_node\\src\\node.rs","byte_start":1830,"byte_end":1839,"line_start":64,"line_end":64,"column_start":24,"column_end":33,"is_primary":false,"text":[{"text":"#[derive(Clone, Debug, PartialEq)]","highlight_start":24,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(PartialEq)]","def_site_span":{"file_name":"C:\\Users\\Mi\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\cmp.rs","byte_start":7813,"byte_end":7832,"line_start":236,"line_end":236,"column_start":1,"column_end":20,"is_primary":false,"text":[{"text":"pub macro PartialEq($item:item) {","highlight_start":1,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0369]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: binary operation `==` cannot be applied to type `Keypair`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msn_node\\src\\node.rs:68:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m64\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Clone, Debug, PartialEq)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m---------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this derive macro expansion\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m68\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub keypair: Keypair,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the derive macro `PartialEq` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"aborting due to 8 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: aborting due to 8 previous errors\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0053, E0271, E0277, E0369, E0599.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mSome errors have detailed explanations: E0053, E0271, E0277, E0369, E0599.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0053`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mFor more information about an error, try `rustc --explain E0053`.\u001b[0m\n"}
