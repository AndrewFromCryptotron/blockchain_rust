/* automatically generated by rust-bindgen 0.60.1 */

pub type Rans64State = u64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Rans64EncSymbol {
    pub rcp_freq: u64,
    pub freq: u32,
    pub bias: u32,
    pub cmpl_freq: u32,
    pub rcp_shift: u32,
}
#[test]
fn bindgen_test_layout_Rans64EncSymbol() {
    assert_eq!(
        ::std::mem::size_of::<Rans64EncSymbol>(),
        24usize,
        concat!("Size of: ", stringify!(Rans64EncSymbol))
    );
    assert_eq!(
        ::std::mem::align_of::<Rans64EncSymbol>(),
        8usize,
        concat!("Alignment of ", stringify!(Rans64EncSymbol))
    );
    fn test_field_rcp_freq() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Rans64EncSymbol>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rcp_freq) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Rans64EncSymbol),
                "::",
                stringify!(rcp_freq)
            )
        );
    }
    test_field_rcp_freq();
    fn test_field_freq() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Rans64EncSymbol>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).freq) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(Rans64EncSymbol),
                "::",
                stringify!(freq)
            )
        );
    }
    test_field_freq();
    fn test_field_bias() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Rans64EncSymbol>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bias) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(Rans64EncSymbol),
                "::",
                stringify!(bias)
            )
        );
    }
    test_field_bias();
    fn test_field_cmpl_freq() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Rans64EncSymbol>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cmpl_freq) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(Rans64EncSymbol),
                "::",
                stringify!(cmpl_freq)
            )
        );
    }
    test_field_cmpl_freq();
    fn test_field_rcp_shift() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Rans64EncSymbol>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rcp_shift) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(Rans64EncSymbol),
                "::",
                stringify!(rcp_shift)
            )
        );
    }
    test_field_rcp_shift();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Rans64DecSymbol {
    pub start: u32,
    pub freq: u32,
}
#[test]
fn bindgen_test_layout_Rans64DecSymbol() {
    assert_eq!(
        ::std::mem::size_of::<Rans64DecSymbol>(),
        8usize,
        concat!("Size of: ", stringify!(Rans64DecSymbol))
    );
    assert_eq!(
        ::std::mem::align_of::<Rans64DecSymbol>(),
        4usize,
        concat!("Alignment of ", stringify!(Rans64DecSymbol))
    );
    fn test_field_start() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Rans64DecSymbol>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Rans64DecSymbol),
                "::",
                stringify!(start)
            )
        );
    }
    test_field_start();
    fn test_field_freq() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Rans64DecSymbol>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).freq) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(Rans64DecSymbol),
                "::",
                stringify!(freq)
            )
        );
    }
    test_field_freq();
}
extern "C" {
    pub fn rans_64_enc_init(r: *mut Rans64State);
}
extern "C" {
    pub fn rans_64_enc_put(
        r: *mut Rans64State,
        pptr: *mut *mut u32,
        start: u32,
        freq: u32,
        scale_bits: u32,
    );
}
extern "C" {
    pub fn rans_64_enc_flush(r: *mut Rans64State, pptr: *mut *mut u32);
}
extern "C" {
    pub fn rans_64_dec_init(r: *mut Rans64State, pptr: *mut *mut u32);
}
extern "C" {
    pub fn rans_64_dec_get(r: *mut Rans64State, scale_bits: u32) -> u32;
}
extern "C" {
    pub fn rans_64_dec_advance(
        r: *mut Rans64State,
        pptr: *mut *mut u32,
        start: u32,
        freq: u32,
        scale_bits: u32,
    );
}
extern "C" {
    pub fn rans_64_enc_symbol_init(s: *mut Rans64EncSymbol, start: u32, freq: u32, scale_bits: u32);
}
extern "C" {
    pub fn rans_64_dec_symbol_init(s: *mut Rans64DecSymbol, start: u32, freq: u32);
}
extern "C" {
    pub fn rans_64_enc_put_symbol(
        r: *mut Rans64State,
        pptr: *mut *mut u32,
        sym: *const Rans64EncSymbol,
        scale_bits: u32,
    );
}
extern "C" {
    pub fn rans_64_dec_advance_symbol(
        r: *mut Rans64State,
        pptr: *mut *mut u32,
        sym: *const Rans64DecSymbol,
        scale_bits: u32,
    );
}
extern "C" {
    pub fn rans_64_dec_advance_step(r: *mut Rans64State, start: u32, freq: u32, scale_bits: u32);
}
extern "C" {
    pub fn rans_64_dec_advance_symbol_step(
        r: *mut Rans64State,
        sym: *const Rans64DecSymbol,
        scale_bits: u32,
    );
}
extern "C" {
    pub fn rans_64_dec_renorm(r: *mut Rans64State, pptr: *mut *mut u32);
}
