/* automatically generated by rust-bindgen 0.60.1 */

pub type RansState = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RansEncSymbol {
    pub x_max: u32,
    pub rcp_freq: u32,
    pub bias: u32,
    pub cmpl_freq: u16,
    pub rcp_shift: u16,
}
#[test]
fn bindgen_test_layout_RansEncSymbol() {
    assert_eq!(
        ::std::mem::size_of::<RansEncSymbol>(),
        16usize,
        concat!("Size of: ", stringify!(RansEncSymbol))
    );
    assert_eq!(
        ::std::mem::align_of::<RansEncSymbol>(),
        4usize,
        concat!("Alignment of ", stringify!(RansEncSymbol))
    );
    fn test_field_x_max() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RansEncSymbol>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x_max) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RansEncSymbol),
                "::",
                stringify!(x_max)
            )
        );
    }
    test_field_x_max();
    fn test_field_rcp_freq() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RansEncSymbol>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rcp_freq) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(RansEncSymbol),
                "::",
                stringify!(rcp_freq)
            )
        );
    }
    test_field_rcp_freq();
    fn test_field_bias() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RansEncSymbol>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bias) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(RansEncSymbol),
                "::",
                stringify!(bias)
            )
        );
    }
    test_field_bias();
    fn test_field_cmpl_freq() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RansEncSymbol>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cmpl_freq) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(RansEncSymbol),
                "::",
                stringify!(cmpl_freq)
            )
        );
    }
    test_field_cmpl_freq();
    fn test_field_rcp_shift() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RansEncSymbol>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rcp_shift) as usize - ptr as usize
            },
            14usize,
            concat!(
                "Offset of field: ",
                stringify!(RansEncSymbol),
                "::",
                stringify!(rcp_shift)
            )
        );
    }
    test_field_rcp_shift();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RansDecSymbol {
    pub start: u16,
    pub freq: u16,
}
#[test]
fn bindgen_test_layout_RansDecSymbol() {
    assert_eq!(
        ::std::mem::size_of::<RansDecSymbol>(),
        4usize,
        concat!("Size of: ", stringify!(RansDecSymbol))
    );
    assert_eq!(
        ::std::mem::align_of::<RansDecSymbol>(),
        2usize,
        concat!("Alignment of ", stringify!(RansDecSymbol))
    );
    fn test_field_start() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RansDecSymbol>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RansDecSymbol),
                "::",
                stringify!(start)
            )
        );
    }
    test_field_start();
    fn test_field_freq() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RansDecSymbol>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).freq) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(RansDecSymbol),
                "::",
                stringify!(freq)
            )
        );
    }
    test_field_freq();
}
extern "C" {
    pub fn rans_enc_init(r: *mut RansState);
}
extern "C" {
    pub fn rans_enc_renorm(
        x: RansState,
        pptr: *mut *mut u8,
        freq: u32,
        scale_bits: u32,
    ) -> RansState;
}
extern "C" {
    pub fn rans_enc_put(
        r: *mut RansState,
        pptr: *mut *mut u8,
        start: u32,
        freq: u32,
        scale_bits: u32,
    );
}
extern "C" {
    pub fn rans_enc_flush(r: *mut RansState, pptr: *mut *mut u8);
}
extern "C" {
    pub fn rans_dec_init(r: *mut RansState, pptr: *mut *mut u8);
}
extern "C" {
    pub fn rans_dec_get(r: *mut RansState, scale_bits: u32) -> u32;
}
extern "C" {
    pub fn rans_dec_advance(
        r: *mut RansState,
        pptr: *mut *mut u8,
        start: u32,
        freq: u32,
        scale_bits: u32,
    );
}
extern "C" {
    pub fn rans_enc_symbol_init(s: *mut RansEncSymbol, start: u32, freq: u32, scale_bits: u32);
}
extern "C" {
    pub fn rans_dec_symbol_init(s: *mut RansDecSymbol, start: u32, freq: u32);
}
extern "C" {
    pub fn rans_enc_put_symbol(r: *mut RansState, pptr: *mut *mut u8, sym: *const RansEncSymbol);
}
extern "C" {
    pub fn rans_dec_advance_symbol(
        r: *mut RansState,
        pptr: *mut *mut u8,
        sym: *const RansDecSymbol,
        scale_bits: u32,
    );
}
extern "C" {
    pub fn rans_dec_advance_step(r: *mut RansState, start: u32, freq: u32, scale_bits: u32);
}
extern "C" {
    pub fn rans_dec_advance_symbol_step(
        r: *mut RansState,
        sym: *const RansDecSymbol,
        scale_bits: u32,
    );
}
extern "C" {
    pub fn rans_dec_renorm(r: *mut RansState, pptr: *mut *mut u8);
}
